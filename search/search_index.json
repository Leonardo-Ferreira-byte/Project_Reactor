{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p> <p>Nesse projeto foi criado um programa que simula a rea\u00e7\u00e3o de hidrotratamento de dois tipos de \u00f3leo: \u00f3leo diesel e \u00f3leo de g\u00e1s a v\u00e1cuo. Ele \u00e9 constitu\u00eddo de dois m\u00f3dulos: correlations e system. No primeiro h\u00e1 fun\u00e7\u00f5es que calculam propriedades importantes pra simula\u00e7\u00e3o e no segundo h\u00e1 classes respons\u00e1veis por fazer a simula\u00e7\u00e3o propriamente dita.</p> <p>Na pasta simulations h\u00e1 arquivos jupyter que chamam as classes do m\u00f3dulo sistems para se realizar a simula\u00e7\u00e3o.</p>"},{"location":"correlations/","title":"overview","text":"<p>M\u00f3dulo com arquivos contendo fun\u00e7\u00f5es necess\u00e1rias para calcular correla\u00e7\u00f5es para obten\u00e7\u00e3o das propriedades do fluido  e do reator como densidade, correla\u00e7\u00f5es cin\u00e9ticas,coeficientes de transfer\u00eancia de massa e de solubilidade, assim como propriedades dos componentes(constantes). A pasta \u00e9 constitu\u00edda dos arquivos python:</p> <ul> <li>data</li> <li>density_correlations</li> <li>kinetics_diesel</li> <li>mass_transfer</li> <li>solubility</li> </ul>"},{"location":"correlations/data/","title":"Constantes - Nome","text":"<ul> <li>Patm: press\u00e3o nas condi\u00e7\u00f5es CNTP</li> <li>T0: temperatura nas condi\u00e7\u00f5es CNTP</li> <li>alfa1: primeiro coeficiente de transfer\u00eancia de massa</li> <li>alfa2: segundo coeficiente de transfer\u00eancia de massa</li> <li>roW: densidade da \u00e1gua em g/cm\u00b3 a 15,6\u00baC</li> <li>vc_2: volume cr\u00edtico espec\u00edfico do hidrog\u00eanio em cm\u00b3/mol</li> <li>vc_4: volume cr\u00edtico espec\u00edfico do sulfeto de hidrog\u00eanio em cm\u00b3/mol</li> <li>vH2: volume molar do hidrog\u00eanio em cm\u00b3/mol</li> <li>vH2S: volume molar do sulfeto de hidrog\u00eanio em cm\u00b3/mol</li> <li>Vn: volume molar nas condi\u00e7\u00f5es padr\u00f5es em Nl</li> </ul>"},{"location":"correlations/data/#funcoes","title":"Fun\u00e7\u00f5es","text":"<ul> <li> <p>specific_gravity: calcula gravidade espec\u00edfica do \u00f3leo a partir da densidade API</p> </li> <li> <p>get_API: calcula a densidade API do \u00f3leo a partir da gravidade espec\u00edfica</p> </li> <li> <p>get_volume_molar_oil: calcula o volume molar do \u00f3leo a partir da temperatura m\u00e9dia de ebuli\u00e7\u00e3o, da densidade espec\u00edfica e da massa molar do \u00f3leo</p> </li> </ul>"},{"location":"correlations/density_correlations/","title":"density correlations","text":"<p>$$ \\left(0.167 + \\left(16.181 \\cdot 10^{-0.0425 \\cdot \\rho_0}\\right)\\right) \\cdot \\frac{P}{1000}  - 0.01 \\cdot \\left(0.299 + \\left(263 \\cdot 10^{-0.0603 \\cdot \\rho_0}\\right)\\right) \\cdot \\left(\\frac{P}{1000}\\right)^2 $$</p> <p>$$ \\sum_{i=0}^n i^2 = \\frac{(n^2+n)(2n+1)}{6} $$</p>"},{"location":"correlations/density_correlations/#density-correlations-module","title":"Density Correlations Module","text":"<p>This module contains functions for calculating the corrections to oil density based on pressure and temperature, as well as the oil density itself. The calculations are based on standard conditions and use specific parameters for temperature and pressure adjustments.</p>"},{"location":"correlations/density_correlations/#functions","title":"Functions","text":"<pre><code>deltarhoP(rho0, P)\n\nDescription: Computes the correction to oil density based on pressure.\n\nParameters:\n\nrho0: int or floatDensity at standard conditions (15.6\u00b0C, 101.3 kPa) in lb/ft\u00b3.\n\nP: int or floatPressure in psia.\n\nReturns:\n\ndeltarhoP: floatDensity correction with pressure in lb/ft\u00b3.\n</code></pre> <p>deltarhoT(rho0, P, T)</p> <p>Description: Computes the correction to oil density based on temperature.</p> <p>Parameters:</p> <p>rho0: int or floatDensity at standard conditions (15.6\u00b0C, 101.3 kPa) in lb/ft\u00b3.</p> <p>P: int or floatPressure in psia.</p> <p>T: int or floatTemperature in \u00b0R.</p> <p>Returns:</p> <p>deltarhoT: floatDensity correction with temperature in lb/ft\u00b3.</p> <p>oil_density(rho0, P, T)</p> <p>Description: Computes the oil density as a function of pressure and temperature.</p> <p>Parameters:</p> <p>rho0: int or floatDensity at standard conditions (15.6\u00b0C, 101.3 kPa) in g/cm\u00b3.</p> <p>P: int or floatPressure in Pa.</p> <p>T: int or floatTemperature in K.</p> <p>Returns:</p> <p>oil_density: floatOil density corrected for temperature and pressure in g/cm\u00b3.</p> <p>Notes</p> <p>The rho0 input for oil_density is converted from g/cm\u00b3 to lb/ft\u00b3 internally.</p> <p>Temperature T is converted from Kelvin to Rankine internally.</p> <p>Pressure P is converted from Pascal to psia relative to atmospheric pressure using the imported Patm constant.</p> <p>Dependencies</p> <p>The module imports Patm from correlations.data for pressure conversions.</p>"},{"location":"correlations/solubility/","title":"solubility","text":"<pre><code>def get_viscosity(T, API):\n    \"\"\"\n    Function to get the viscosity of oil (Glaso, 1980).\n\n    Parameters\n    ----------\n    API: float or int\n        API gravity of oil.\n\n    T: int or float\n        Temperature in K.\n\n    Returns\n    -------\n    mi_L: float\n        Viscosity of oil sulfite in g/(cm*s).\n    \"\"\"\n\n    T = T * 1.8\n    a = 10.313 * np.log10(T - 460) - 36.447\n    return 3.141e10 * (T - 460) ** (-3.444) * ((np.log10(API)) ** a) / 100\n</code></pre>"}]}